51. Write an SQL query to report the name, population, and area of the big countries.
Return the result table in any order.
=>
SELECT name, population, gdp  FROM world
WHERE
    area >= 3000000 or population >= 25000000
;



52. Write an SQL query to report the names of the customer that are not referred by the customer with id = 2
=>
SELECT name FROM customer
WHERE
    referee_id != 2 or referee_id IS NULL
;



53. Write an SQL query to report all customers who never order anything.
Return the result table in any order.
=>
SELECT name FROM customers
WHERE
    id not IN (SELECT customerid FROM orders)
;



54. Write an SQL query to find the team size of each of the employees.
Return result table in any order.
=>
SELECT employee_id, 
COUNT(employee_id) over(partition by team_id) as total_count
from employee ORDER BY employee_id
;



55. A telecommunications company wants to invest in new countries. The company intends to invest in
the countries where the average call duration of the calls in this country is strictly greater than the
global average call duration.
Write an SQL query to find the countries where this company can invest.
Return the result table in any order.
=>
with country_phone as (SELECT p.*, c.name as country_name FROM person p JOIN
(SELECT name, 
CASE
    WHEN LENGTH(country_code) < 3 then CONCAT("0", country_code)
    else country_code
end as new_code
FROM country) as c 
ON
    left(p.phone_number, 3) = c.new_code
)

SELECT country_name, sum(total_dur)/sum(total_count) as final FROM (SELECT cp.country_name, (2 * cal.duration) as total_dur,  (2 * count(cp.country_name)) as total_count FROM calls as cal
JOIN
    country_phone as cp
ON
    cal.caller_id = cp.id
GROUP BY cp.country_name, duration) as tmp
GROUP BY country_name ORDER BY final DESC LIMIT 1



56. Write an SQL query to report the device that is first logged in for each player.
Return the result table in any order.
=>
select player_id, device_id as first_login_device FROM (SELECT player_id, device_id, event_date,
rank() over(partition by player_id ORDER BY event_date ASC) as first_login
FROM activity ORDER BY player_id) as tmp
WHERE
    first_login = 1
;



57. Write an SQL query to find the customer_number for the customer who has placed the largest
number of orders.
The test cases are generated so that exactly one customer will have placed more orders than any
other customer.
=>
SELECT customer_number FROM (SELECT customer_number, COUNT(customer_number) as total_count FROM orders
GROUP BY customer_number
ORDER BY total_count DESC LIMIT 1) as tmp
;



58. Write an SQL query to report all the consecutive available seats in the cinema.
Return the result table ordered by seat_id in ascending order.
The test cases are generated so that more than two seats are consecutively available.
=>
with CTE as (SELECT *, 
lag(free) over(order by free) as new_val
FROM cinema)

SELECT seat_id FROM CTE
WHERE
    new_val = 1
GROUP BY seat_id
;



59. Write an SQL query to report the names of all the salespersons who did not have any orders related to
the company with the name "RED".
=>
SELECT sales_id FROM orders
WHERE
    com_id = 1;

SELECT name FROM salesperson
WHERE
    sales_id NOT IN 
    (
    SELECT sales_id FROM orders
    WHERE
        com_id = (
                SELECT com_id FROM company
                WHERE
                    name = "red"
                )
    )
;



60. Write an SQL query to report for every three line segments whether they can form a triangle.
Return the result table in any order.
=>
SELECT *,
CASE
    when (x + y) <= z or (y + z) <= x or (z + x) <= y then "NO"
    else "YES"
end as triangle_bool
FROM triangle
;



61. Write an SQL query to report the shortest distance between any two points from the Point table.
The query result format is in the following example.
=>
SELECT MIN(new_val) from (SELECT 
IFNULL(ABS(lag(x) over(order by x ASC)), 0) as new_val
FROM point) as tmp
WHERE
    new_val != 0
;



62. Write a SQL query for a report that provides the pairs (actor_id, director_id) where the actor has
cooperated with the director at least three times.
=>
SELECT actor_id, director_id FROM actor_director
GROUP BY actor_id, director_id
HAVING
    count(CONCAT(actor_id,director_id)) >= 3 ;



63. Write an SQL query that reports the product_name, year, and price for each sale_id in the Sales table.
Return the resulting table in any order
=>
SELECT p.product_name, s.year, s.price  FROM sales as s
JOIN (select * FROM product) as p ON p.product_id = s.product_id
;



64. Write an SQL query that reports the average experience years of all the employees for each project,
rounded to 2 digits.
=>
SELECT p.project_id, round(avg(e.experience_years), 2) as average_exp 
FROM project as p
JOIN (SELECT * from employee) as e ON
e.employee_id = p.employee_id
GROUP BY project_id;



65. Write an SQL query that reports the best seller by total sales price, If there is a tie, report them all.
Return the result table in any order.
=>
with CTE as (SELECT seller_id, sum(price) as total_price FROM sales
GROUP BY seller_id)
SELECT seller_id FROM CTE
WHERE
    total_price >= (SELECT max(total_price) FROM CTE)
;



66. Write an SQL query that reports the buyers who have bought S8 but not iPhone. Note that S8 and
iPhone are products present in the Product table
=>
SELECT buyer_id FROM sales 
WHERE
    buyer_id NOT IN 
    (SELECT buyer_id FROM sales
    WHERE
        product_id IN (SELECT product_id FROM product WHERE product_name != "S8")
    GROUP BY buyer_id
    )
;



67. Write an SQL query to compute the moving average of how much the customer paid in a seven days
window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.
Return result table ordered by visited_on in ascending order.
=>
with CTE as 
(SELECT visited_on,
SUM(total_amount) over (rows BETWEEN 6 preceding and current row) as sum_amount,
AVG(total_amount) over (rows BETWEEN 6 preceding and current row) as average_amount
FROM 
    (
        SELECT visited_on, sum(amount) as total_amount FROM  customer
        GROUP BY visited_on
    ) as tmp
)
SELECT * FROM CTE ORDER BY visited_on ASC
;



68. Write an SQL query to find the total score for each gender on each day.
Return the result table ordered by gender and day in ascending order.
=>
SELECT gender, day, 
sum(score_points) over (partition by gender ORDER BY day rows between unbounded preceding and current row) as total_score
FROM scores;



72. Write an SQL query to find for each month and country, the number of transactions and their total
amount, the number of approved transactions and their total amount.
Return the result table in any order
=>
SELECT trans_month, country, COUNT(trans_month), SUM(state="approved") as total_approved, 
SUM(state="decline") as total_decline, SUM(amount)
FROM 
(
    SELECT id, country, state, amount, 
    left(trans_date,7) as trans_month FROM transactions
) tmp
GROUP BY trans_month, country;



73. Write an SQL query to find the average daily percentage of posts that got removed after being
reported as spam, rounded to 2 decimal places
=>
with CTE as (SELECT post_id, action_date, SUM(extra="spam") as spam_count,
CASE
    when post_id IN (SELECT post_id FROM removals) then 1
    else 0
end as removed
FROM actions
GROUP BY action_date, post_id
HAVING
    sum(extra="spam") != 0)
SELECT round(sum(total_percent)/count(*), 0) as average_daily_percent 
FROM 
    (
        SELECT sum(removed)/sum(spam_count) * 100 as total_percent FROM CTE
        GROUP BY action_date
    ) tmp
;



74. Write an SQL query to report the fraction of players that logged in again on the day after the day they
first logged in, rounded to 2 decimal places. In other words, you need to count the number of players
that logged in for at least two consecutive days starting from their first login date, then divide that
number by the total number of players.
=>
with CTE as (SELECT player_id, event_date,
datediff(event_date, lag(event_date) over (partition by player_id ORDER BY event_date ASC)) as lag_date
FROM activity)
SELECT round(count(distinct(player_id)) / (select count(DISTINCT(player_id)) FROM activity), 2) as fraction
from CTE
WHERE
    lag_date = 1
;



75. Write an SQL query to report the fraction of players that logged in again on the day after the day they
first logged in, rounded to 2 decimal places. In other words, you need to count the number of players
that logged in for at least two consecutive days starting from their first login date, then divide that
number by the total number of players.
=>
with CTE as (SELECT player_id, event_date,
datediff(event_date, lag(event_date) over (partition by player_id ORDER BY event_date ASC)) as lag_date
FROM activity)
SELECT round(count(distinct(player_id)) / (select count(DISTINCT(player_id)) FROM activity), 2) as fraction
from CTE
WHERE
    lag_date = 1
;




76. Write an SQL query to find the salaries of the employees after applying taxes. Round the salary to the
nearest integer.
The tax rate is calculated for each company based on the following criteria:
● 0% If the max salary of any employee in the company is less than $1000.
● 24% If the max salary of any employee in the company is in the range [1000, 10000] inclusive.
● 49% If the max salary of any employee in the company is greater than $10000.
=>
with tax_table as (SELECT company_id,
case
    when max(salary) < 1000 then 0
    when max(salary) BETWEEN 1000 and 10000 then 24/100
    else 49/100
end as tax_percent
FROM salaries
GROUP BY company_id)

SELECT s.company_id, s.employee_id, s.employee_name, 
round((s.salary - (s.salary * tax_table.tax_percent )), 0) as calculated_salary
FROM salaries as s
JOIN tax_table ON tax_table.company_id = s.company_id
;



77. Write an SQL query to report the difference between the number of apples and oranges sold each day.
Return the result table ordered by sale_date.
=>
SELECT sa.sale_date, (SUM(sa.sold_num) - so.total_oranges) as diff FROM sales as sa
JOIN (SELECT sale_date, SUM(sold_num) as total_oranges FROM sales
WHERE
    fruit = "oranges"
GROUP BY sale_date) as so
ON
    so.sale_date = sa.sale_date
WHERE
    sa.fruit = "apples"
GROUP BY sale_date;



78. Write an SQL query to report the difference between the number of apples and oranges sold each day.
Return the result table ordered by sale_date.
=>
SELECT sa.sale_date, (SUM(sa.sold_num) - so.total_oranges) as diff FROM sales as sa
JOIN (SELECT sale_date, SUM(sold_num) as total_oranges FROM sales
WHERE
    fruit = "oranges"
GROUP BY sale_date) as so
ON
    so.sale_date = sa.sale_date
WHERE
    sa.fruit = "apples"
GROUP BY sale_date;



79. Write an SQL query to evaluate the boolean expressions in Expressions table.
Return the result table in any order.
=>
with CTE as (SELECT * FROM expression)
SELECT *,
CASE
    when operator = "<" and (left_operand < right_operand) = 1 then "true"
    when operator = ">" and (left_operand > right_operand) = 1 then "true"
    when operator = "=" and (left_operand = right_operand) = 1 then "true"
    else "false"
end as new_val
FROM CTE;



80. A telecommunications company wants to invest in new countries. The company intends to invest in
the countries where the average call duration of the calls in this country is strictly greater than the
global average call duration.
Write an SQL query to find the countries where this company can invest.
Return the result table in any order.
=>
with country_phone as (SELECT p.*, c.name as country_name FROM person p JOIN
(SELECT name, 
CASE
    WHEN LENGTH(country_code) < 3 then CONCAT("0", country_code)
    else country_code
end as new_code
FROM country) as c 
ON
    left(p.phone_number, 3) = c.new_code
)

SELECT country_name, sum(total_dur)/sum(total_count) as final FROM (SELECT cp.country_name, (2 * cal.duration) as total_dur,  (2 * count(cp.country_name)) as total_count FROM calls as cal
JOIN
    country_phone as cp
ON
    cal.caller_id = cp.id
GROUP BY cp.country_name, duration) as tmp
GROUP BY country_name ORDER BY final DESC LIMIT 1



81 Query the Name of any student in STUDENTS who scored higher than 75 Marks. Order your output by
the last three characters of each name. If two or more students both have names ending in the same
last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID
=>
SELECT name FROM students
WHERE
    marks > 75
ORDER BY RIGHT(name, 3), id
;



82. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in
alphabetical order.
=>
SELECT name FROM employee
ORDER BY name ASC
;



83. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in
Employee having a salary greater than $2000 per month who have been employees for less than 10
months. Sort your result by ascending employee_id.
=>
SELECT name FROM employee
WHERE
    salary > 2000 and months < 10
ORDER BY employee_id ASC
;



84. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths.
Output one of the following statements for each record in the table:
● Equilateral: It's a triangle with sides of equal length.
● Isosceles: It's a triangle with sides of equal length.
● Scalene: It's a triangle with sides of differing lengths.
● Not A Triangle: The given values of A, B, and C don't form a triangle
=>
SELECT *,
CASE
    when a = b and b = c then "equilateral"
    when a = b and b != c and a+b > c then "isoceles"
    when a + b < c or b + c < a or c + a < b then "not a triangle"
    when a != b and b != c and a != c then "scalene"
    else "normal triangle"
end as triangle_value
from triangle;



85. Assume you are given the table below containing information on user transactions for particular
products. Write a query to obtain the year-on-year growth rate for the total spend of each product for
each year.
Output the year (in ascending order) partitioned by product id, current year's spend, previous year's
spend and year-on-year growth rate (percentage rounded to 2 decimal places).
=>
SELECT extract(year FROM transaction_date) as year_, product_id, 
spend as curr_year_spend, 
lag(spend) over() as prev_year_spend,
round((spend/lag(spend) over() * 100) - 100, 2) as yoy_rate
FROM transactions;



87. Assume you have the table below containing information on Facebook user actions. Write a
query to obtain the active user retention in July 2022. Output the month (in numerical format 1, 2, 3)
and the number of monthly active users (MAUs).
Hint: An active user is a user who has user action ("sign-in", "like", or "comment") in the current month
and last month.
=>
SELECT extract(month FROM event_date) as month, COUNT(user_id) as MAU FROM user_actions
WHERE
    event_date BETWEEN "2022-06-01 00:00:00" and "2022-06-30 12:00:00" AND event_type = "sign-in"
    and user_id in 
    (
        SELECT user_id FROM user_actions 
        WHERE event_date BETWEEN "2022-06-01 00:00:00" and "2022-06-30 12:00:00" AND event_type != "sign-in"
    )
GROUP BY month
;


	
Q90. Amazon Web Services (AWS) is powered by fleets of servers. Senior management has
requested data-driven solutions to optimise server usage.
Write a query that calculates the total time that the fleet of servers was running. The output should be
in units of full days.
=>
with CTE as (SELECT server_id, status_time,
lead(status_time) over(partition by server_id ORDER BY status_time ASC) as new_time
FROM server)
SELECT sum(DATEDIFF( new_time, status_time )) as total_uptime_days FROM CTE;



Q91. Sometimes, payment transactions are repeated by accident; it could be due to user error, API failure or
a retry error that causes a credit card to be charged twice.
Using the transactions table, identify any payments made at the same merchant with the same credit
card for the same amount within 10 minutes of each other. Count such repeated payments.
=>
with CTE as (SELECT *,
timestampdiff(minute,transaction_timestamp,lag(transaction_timestamp) over()) 
as minutes_diff
FROM transactions)

SELECT count(minutes_diff) as payment_count FROM CTE
GROUP BY minutes_diff
HAVING
    abs(CTE.minutes_diff) <= 10
;



Q93. Write an SQL query to find the total score for each gender on each day.
Return the result table ordered by gender and day in ascending order.
=>
SELECT gender, day, 
sum(score_points) over (partition by gender ORDER BY day rows between unbounded preceding and current row) as total_score
FROM scores;



Q94. A telecommunications company wants to invest in new countries. The company intends to invest in
the countries where the average call duration of the calls in this country is strictly greater than the
global average call duration.
Write an SQL query to find the countries where this company can invest.
Return the result table in any order.
=>
with country_phone as (SELECT p.*, c.name as country_name FROM person p JOIN
(SELECT name, 
CASE
    WHEN LENGTH(country_code) < 3 then CONCAT("0", country_code)
    else country_code
end as new_code
FROM country) as c 
ON
    left(p.phone_number, 3) = c.new_code
)

SELECT country_name, sum(total_dur)/sum(total_count) as final FROM (SELECT cp.country_name, (2 * cal.duration) as total_dur,  (2 * count(cp.country_name)) as total_count FROM calls as cal
JOIN
    country_phone as cp
ON
    cal.caller_id = cp.id
GROUP BY cp.country_name, duration) as tmp
GROUP BY country_name ORDER BY final DESC LIMIT 1



Q96. Write an SQL query to report the comparison result (higher/lower/same) of the average salary of
employees in a department to the company's average salary.
=>
with CTE as 
(
    SELECT distinct(full_table.pay_date), round(AVG(full_table.amount), 0) as avg_pay, 
    full_table.department_id, avg_table.company_avg_pay 
    FROM 
    (
        SELECT s.*, e.department_id FROM salary s
        JOIN
            (SELECT * FROM employee) as e
        ON
            e.employee_id = s.employee_id
    ) full_table
    JOIN
        (SELECT pay_date, round(AVG(amount),0) as company_avg_pay FROM salary
        GROUP BY pay_date) as avg_table
    ON
        avg_table.pay_date = full_table.pay_date
    GROUP BY full_table.pay_date, full_table.department_id, 
    avg_table.company_avg_pay
)

SELECT pay_date, department_id,
CASE
    When avg_pay > company_avg_pay then "Higher"
    when avg_pay < company_avg_pay then "lower"
    when avg_pay = company_avg_pay then "same"
end as new_table_val
FROM CTE
GROUP BY pay_date, department_id, avg_pay
ORDER BY department_id, pay_date
;



Q97.Write an SQL query to report for each install date, the number of players that installed the game on
that day, and the day one retention.
=>
SELECT first_log.*, IFNULL(round((game_table.game_play / first_log.installs),1),0) as retention
FROM 
(
    select first_login, COUNT(first_login) as installs from 
    (
        SELECT player_id, MIN(event_date) as first_login FROM activity
        GROUP BY player_id
    )
first_login_count
GROUP BY first_login) first_log
LEFT JOIN 
(
    SELECT player_id,
    lag(event_date) over(partition by player_id) as game_date,
    event_date - lag(event_date) over(partition by player_id) as game_play
    FROM activity
) as game_table
ON 
game_table.game_date = first_log.first_login and game_play = 1

;